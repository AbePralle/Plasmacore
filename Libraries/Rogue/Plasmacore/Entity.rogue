module Plasmacore

class Entity
  DEFINITIONS
    ENABLED         = 1
    PRESSABLE       = 2
    SELECTABLE      = 4
    DRAGGABLE       = 8

    DRAG_THRESHOLD = 4

  GLOBAL PROPERTIES
    selected            : Entity
    press_position      : XY
    original_position   : XY
    drag_offset         : XY
    is_dragging         : Logical
    any_bounds_modified : Logical

  PROPERTIES
    parent          : Entity
    child           : Entity
    sibling         : Entity
    name            = ""
    position        : XY
    size            : XY
    scale           = XY(1,1)
    rotation        : Angles
    z               = 0.0
    opacity         = 1.0
    attributes      = Entity.ENABLED : Int32
    anchor          = Anchor.CENTER : Anchor
    bounding_quad   : Quad
    bounding_box    : Box
    layer_mask      : Int32

  METHODS
    method init

    method init( bounds:Box )
      position = bounds.center
      size = bounds.size

    method init_object
      if (this not instanceOf Scene)
        if (Scene.current and (Scene.current.default_layer or Scene.current.layers.count <= 1))
          if (Scene.current.layers.is_empty) Scene.current.add( Layer("default") )

          if (Scene.current.default_layer)   layer_mask = Scene.current.default_layer.mask
          else                               layer_mask = Scene.current.layers.first.mask
        endIf
      endIf

    method add( entity:Entity, &translate )
      if (entity.parent is this) return

      if (translate) entity.position = entity.to_parent_screen( entity.position )

      entity.detach
      entity.parent = this
      if (child)
        local cur = child
        while (cur.sibling) cur = cur.sibling
        cur.sibling = entity
      else
        child = entity
      endIf

      if (translate) entity.position = entity.to_parent_local( entity.position )

    method apply( fn:Function(Entity) )
      fn( this )
      apply_to_children( fn )

    method apply_to_children( fn:Function(Entity) )
      local cur = child
      while (cur)
        cur.apply( fn )
        cur = cur.sibling
      endWhile

    method attach( parent:Entity, &translate )
      parent.add( this, &=translate )

    method bounding_box->Box
      if (any_bounds_modified) update_bounds
      return @bounding_box

    method bounding_quad->Quad
      if (any_bounds_modified) update_bounds
      return @bounding_quad

    method child_bounds->Box?
      if (not child) return null
      return child.child_bounds( null )

    method child_bounds( box:Box? )->Box?
      if (not size.is_zero)
        if (box.exists) box = box.value | bounding_box
        else            box = bounding_box
      endIf
      if (sibling) box = sibling.child_bounds( box )
      if (child) box = child.child_bounds( box )
      return box

    method detach
      if (not parent) return

      if (parent.child is this)
        parent.child = this.sibling
      else
        local cur = parent.child
        while (cur.sibling)
          if (cur.sibling is this)
            cur.sibling = this.sibling
            escapeWhile
          endIf
          cur = cur.sibling
        endWhile
      endIf

      parent = null
      sibling = null

    method draggable
      attributes |= DRAGGABLE
      if (not (attributes & (PRESSABLE | SELECTABLE))) attributes |= SELECTABLE

    method draw( layer:Layer )
      if (not is_enabled) return

      if (layer_mask & layer.mask) on_draw( layer )

      if (child)
        push_transform

        local cur = child
        while (cur)
          cur.draw( layer )
          cur = cur.sibling
        endWhile

        pop_transform
      endIf

    method handle( e:PointerEvent, mask:Int32 )
      if (sibling)
        sibling.handle( e, mask )
        if (e.is_consumed) return
      endIf

      if (child)
        child.handle( e, mask )
        if (e.is_consumed) return
      endIf

      if (not (mask & layer_mask))
        return
      endIf

      if (not bounding_box.contains(e.position)) return
      if (not bounding_quad.contains(e.position)) return

      on( e )
      if (e.is_consumed) return

      if (Entity.selected is null and e.is_press)
        if (this.is_pressable or this.is_selectable)
          Entity.selected = this
          Entity.press_position = e.position
          Entity.original_position = this.position
          Entity.drag_offset = position - this.to_parent_local(e.position)
          if (this.is_pressable)
            # 'pressable' starts dragging right away; 'selectable' waits until threshold exceeded
            Entity.is_dragging = true
            Entity.selected.position = Entity.selected.to_parent_local( e.position ) + Entity.drag_offset
            on_drag
          else
            Entity.is_dragging = false
          endIf
          e.consume
        endIf
      endIf

    method layer->LayerMask
      return LayerMask(layer_mask)

    method is_enabled->Logical [macro]
      return (this.attributes & Entity.ENABLED)

    method is_draggable->Logical [macro]
      return (this.attributes & Entity.DRAGGABLE)

    method is_pressable->Logical [macro]
      return (this.attributes & Entity.PRESSABLE)

    method is_selectable->Logical [macro]
      return (this.attributes & Entity.SELECTABLE)

    method name->String
      if (@name is null or @name.count == 0) name = type_name.after_any("::")
      return @name

    method on( e:PointerEvent )

    method on_drag

    method on_draw( layer:Layer )

    method pressable
      attributes |= PRESSABLE

    method push_transform
      local handle = XYZ( (anchor.position * scale * size), 0 )

      local has_rotation = not rotation.is_zero
      if (has_rotation)
        Display.push_view_transform( Quaternion(rotation)->Matrix( handle, XYZ(position,z)) )
      else
        Display.push_view_transform( Matrix.translate(XYZ(position,z)-handle) )
      endIf

      Display.push_view_transform( Matrix.scale(XYZ(scale,1)) )

    method pop_transform
      Display.pop_view_transform
      Display.pop_view_transform

      #{
    method find( xy:XY, &selectable )->Entity
      if (not bounding_box.contains(xy)) return null

      if (child)
        local cur = child
        while (cur)
          local result = cur.find( xy, &=selectable )
          if (result) return result
          cur = cur.sibling
        endWhile
      endIf

      if (selectable and not is_selectable) return null
      if (not bounding_quad.contains(xy)) return null
      return this
      }#

    method replace_with( other:Entity )
      if (child) other.add( child ); child = null

      local cur = other
      while (cur.sibling) cur = cur.sibling
      cur.sibling = sibling
      sibling = null

      if (parent)
        if (parent.child is this)
          parent.child = other
        else
          cur = parent.child
          while (cur.sibling and cur.sibling is not this) cur = cur.sibling
          cur.sibling = this
        endIf
        parent = null
      endIf

    method selectable
      attributes |= SELECTABLE

    method set_enabled( setting:Logical )
      if (setting) attributes |=  Entity.ENABLED
      else         attributes &= !Entity.ENABLED

    method set_anchor( new_anchor:Anchor )
      if (new_anchor != anchor)
        @anchor = new_anchor
        any_bounds_modified = true
      endIf

    method set_layer( new_layer:Layer )
      layer_mask = new_layer.mask

    method set_layer( mask:LayerMask )
      layer_mask = mask.value

    method set_layer( layer_name:String )
      if (Scene.current)
        local layer = Scene.current.layer( layer_name )
        if (layer) layer_mask = layer.mask
      endIf

    method set_position( new_position:XY )
      if (new_position != position)
        @position = new_position
        any_bounds_modified = true
      endIf

    method set_rotation( new_rotation:Angles )
      if (new_rotation != rotation)
        @rotation = new_rotation
        any_bounds_modified = true
      endIf

    method set_rotation( new_angle:Radians )
      set_rotation( new_angle->Degrees )

    method set_rotation( new_angle:Degrees )
      if (new_angle != rotation.z)
        @rotation = Angles( rotation.x, rotation.y, new_angle )
        any_bounds_modified = true
      endIf

    method set_scale( new_scale:Real64 )
      set_scale( XY(new_scale,new_scale) )

    method set_scale( new_scale:XY )
      if (new_scale != scale)
        @scale = new_scale
        any_bounds_modified = true
      endIf

    method set_size( new_size:XY )
      if (new_size != size)
        @size = new_size
        any_bounds_modified = true
      endIf

    method set_z( new_z:Real64 )
      if (new_z != z)
        @z = new_z
        any_bounds_modified = true
      endIf

    method to->String
      if (name.count) return name
      return type_name

    method to_local( xy:XY )->XY
      if (parent) xy = parent.to_local( xy )
      xy = (xy - position) / scale
      if (rotation.z.value) xy = xy.rotated( -rotation.z )
      return xy + anchor.position * size

    method to_parent_local( xy:XY )->XY
      if (parent) return parent.to_local( xy )
      return xy

    method to_screen( xy:XY )->XY
      xy -= anchor.position * size
      if (rotation.z.value) xy = xy.rotated( rotation.z )
      xy *= scale
      xy += position
      if (parent) xy = parent.to_screen( xy )
      return xy

    method to_parent_screen( xy:XY )->XY
      if (parent) return parent.to_screen( xy )
      return xy

    method update_bounds
      if (parent)
        parent.update_bounds
      elseIf (any_bounds_modified)
        any_bounds_modified = false
        _update_bounds
      endIf

    method _update_bounds
      if (not is_enabled) return

      if (size.is_zero)
        bounding_box = Box(0,0,0,0)
        bounding_quad = @bounding_box->Quad
      else
        bounding_quad = Box( position, size ).relative_to( anchor ).transform( Display.world_transform )
        bounding_box  = @bounding_quad->Box
      endIf

      push_transform

      if (child)
        local cur = child
        while (cur)
          cur._update_bounds
          cur = cur.sibling
        endWhile
      endIf

      pop_transform
endClass

class LayerMask( value:Int32 ) [compound]
  METHODS
    method operator+( layer:Layer )->LayerMask
      return LayerMask( value | layer.mask )

    method operator+( layer_name:String )->LayerMask
      if (Scene.current)
        local layer = Scene.current.layer( layer_name )
        if (layer) return LayerMask( value | layer.mask )
      endIf
      return this

    method operator-( layer:Layer )->LayerMask
      return LayerMask( value & !layer.mask )

    method operator-( layer_name:String )->LayerMask
      if (Scene.current)
        local layer = Scene.current.layer( layer_name )
        if (layer) return LayerMask( value & !layer.mask )
      endIf
      return this

endClass

class DragAndDrop
endClass

class Layer
  PROPERTIES
    scene : Scene
    name  : String
    mask  : Int32

  METHODS
    method init( name )

    method draw( image:Image )
      image.draw

    method set_name( new_name:String )
      if (scene)
        scene.layer_lookup.remove( name )
        scene.layer_lookup[ new_name ] = this
      endIf
      @name = new_name
endClass


class Scene : Entity
  GLOBAL PROPERTIES
    current : Scene

  PROPERTIES
    is_fullscreen : Logical
    layers        = Layer[]
    layer_lookup  = StringTable<<Layer>>()
    default_layer : Layer

  METHODS
    method init
      is_fullscreen = true
      current = this

    method activate
      current = this

    method add( layer:Layer )
      require layers.count < 32

      local layer_mask = 0
      layer_mask |= (forEach in layers).mask
      forEach (bit_pos in 0..31)
        if (0 == (layer_mask & (1:<<:bit_pos)))
          layer.mask = (1:<<:bit_pos)
          escapeForEach
        endIf
      endForEach

      layer.scene = this
      layers.add( layer )
      layer_lookup[ layer.name ] = layer

    method handle( e:PointerEvent )
      if (Entity.selected)
        if (e.is_move)
          contingent
            sufficient (Entity.is_dragging)
            necessary (Entity.selected.is_draggable)
            necessary ((e.position - press_position).has_magnitude_greater_than(DRAG_THRESHOLD))
          satisfied
            Entity.is_dragging = true
            Entity.selected.position = Entity.selected.to_parent_local( e.position ) + Entity.drag_offset
            Entity.selected.on_drag
            return
          endContingent
        elseIf (e.is_release)
          Entity.selected = null
          return
        endIf
      endIf

      forEach (layer in layers step -1)
        handle( e, layer.mask )
        if (e.is_consumed) return
      endForEach

    method draw
      if (layers.is_empty) return

      if (is_fullscreen)
        size = Display.size
        position = Display.center
      endIf

      forEach (layer in layers)
        draw( layer )
      endForEach


    method layer( name:String )->Layer
      return layer_lookup[ name ]

    method set_default_layer( @default_layer )

    method set_default_layer( layer_name:String )
      @default_layer = layer( layer_name )

endClass


class Sprite : Entity
  PROPERTIES
    image : Image

  METHODS
    method init( image )
      size = image.size

    method init( image_name:String )
      init( Image(image_name) )

    method image->Image
      return @image

    method on( e:PointerEvent )

    method on_draw( layer:Layer )
      local img = image
      prepare_image( img )
      layer.draw( img )

    method prepare_image( img:Image )
      img.position = position
      img.z = z
      img.rotation = rotation
      img.size = size
      img.scale = scale
      img.anchor = anchor
      img.opacity = opacity

endClass


class Background : Sprite
  ENUMERATE
    FIT
    FILL

  PROPERTIES
    style : Int32
    essential_content = XY(1.0,1.0)

  METHODS
    method init( image, essential_content=XY(1,1), style=Background.FILL )
      prior.init( image )
      size = image.original_size
      compute_bounds

    method init( image_name:String, essential_content=XY(1,1), style=Background.FILL )
      init( Image(image_name), essential_content, style )

    method compute_bounds
      which (style)
        case FIT
          local parent_size = select{ parent:parent.size || Display.size }
          position = parent_size / 2
          scale = (parent_size / size).min

        case FILL
          local parent_size = select{ parent:parent.size || Display.size }
          position = parent_size / 2
          local essential_scale = (parent_size / (size*essential_content)).min
          local whole_scale = (parent_size / size).max
          scale = essential_scale.or_larger( whole_scale )
      endWhich

      anchor = Anchor.CENTER

    method prepare_image( img:Image )
      compute_bounds
      prior.prepare_image( img )
endClass


