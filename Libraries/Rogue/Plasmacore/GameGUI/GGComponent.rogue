uses Plasmacore

class GGComponentManager [singleton]
  PROPERTIES
    pointer_position : XY?
    pointer_focus    : GGComponent
    default_font     : Font

  METHODS
    method init
      default_font = DefaultFont.cloned
      default_font.height = Int32( 20 * (Display.height / 960.0) )
endClass

class GGComponent

  PROPERTIES
    position         : XY
    size             : XY
    validated_bounds : Box?
    fixed_size = GGSize(0,0)
    anchor     = Anchor.CENTER : Anchor

    subcomponents : GGComponent[]

  METHODS
    method init

    method init( fixed_size )

    method init( fixed_size:XY )
      this.fixed_size = fixed_size

    method init( w:Real64, h:Real64 )
      init( XY(w,h) )

    method init( bounds:Box )
      position = bounds.position
      size = bounds.size
      fixed_size = size

    method add( component:GGComponent )->this
      ensure subcomponents
      subcomponents.add( component )
      return this

    method after( e:PointerEvent )
      noAction

    method after_draw
      noAction

    method after_update
      noAction

    method bounds->Box
      return Box( position, size )

    method contains( pos:XY )->Logical
      return bounds.contains( pos )

    method contains( e:PointerEvent )->Logical
      return bounds.contains( e.position )

    method clear->this
      if (subcomponents) subcomponents.clear
      invalidate
      return this

    method count->Int32
      if (not subcomponents) return 0
      return subcomponents.count

    method dispatch( e:PointerEvent )
      if (subcomponents)
        forEach (component in subcomponents)
          component.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf

    method dispatch_draw
      if (subcomponents)
        (forEach in subcomponents).handle_draw
      endIf

    method dispatch_update
      if (subcomponents)
        (forEach in subcomponents).handle_update
      endIf

    method draw
      handle_draw

    method find( at_position:XY )->GGComponent
      if (subcomponents)
        forEach (component in subcomponents)
          if (component.contains(at_position)) return component
        endForEach
      endIf
      return null

    method find( e:PointerEvent )->GGComponent
      return find( e.position )

    method handle( e:PointerEvent )
      GGComponentManager.pointer_position = e.position
      if (GGComponentManager.pointer_focus and GGComponentManager.pointer_focus is not this)
        GGComponentManager.pointer_focus.handle( e )
        return
      endIf

      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )

    method handle_draw
      on_draw
      dispatch_draw
      after_draw

    method handle_update
      if (not validated_bounds.exists) update_layout( bounds )
      on_update
      dispatch_update
      after_update

    method horizontal_flex->Real64
      if (fixed_size.value.x) return 0.0
      else                    return 1.0

    method invalidate
      validated_bounds = null
      if (subcomponents)
        (forEach in subcomponents).invalidate
      endIf

    method maximum_height( parent_size:XY, &subcomponents_only )->Real64
      return fixed_size.y( parent_size )

    method maximum_size( parent_size:XY, &subcomponents_only )->XY
      return XY( maximum_width(parent_size), maximum_height(parent_size) )

    method maximum_width( parent_size:XY, &subcomponents_only )->Real64
      return fixed_size.x( parent_size )

    method minimum_height( parent_size:XY, &subcomponents_only )->Real64
      return fixed_size.y( parent_size )

    method minimum_size( parent_size:XY, &subcomponents_only )->XY
      return XY( minimum_width(parent_size), minimum_height(parent_size) )

    method minimum_width( parent_size:XY, &subcomponents_only )->Real64
      return fixed_size.x( parent_size )

    method on( e:PointerEvent )
      noAction

    method on_draw
      noAction

    method on_update
      noAction

    method on_update_layout
      noAction

    method operator+( right_component:GGComponent )->GGComponent
      return GGHorizontalLayout().add( this ).add( right_component )

    method operator/( bottom_component:GGComponent )->GGComponent
      return GGVerticalLayout().add( this ).add( bottom_component )

    method set_anchor( @anchor )->this
      return this

    method set_fixed_size( @fixed_size )->this
      return this

    method update
      handle_update

    method update( new_bounds:Box )
      update_layout( new_bounds )
      update

    method update_subcomponent_layout
      if (subcomponents)
        local my_bounds = bounds
        (forEach in subcomponents).update_layout( my_bounds )
      endIf

    method update_layout( new_bounds:Box )
      if (validated_bounds.exists and validated_bounds.value == new_bounds) return

      invalidate
      validated_bounds = new_bounds
      on_update_layout

      size = XY( select{fixed_size.x(new_bounds.size)||new_bounds.width}, select{fixed_size.y(new_bounds.size)||new_bounds.height} ).floor
      position = bounds.positioned_within( new_bounds ).position.floor
      update_subcomponent_layout

    method vertical_flex->Real64
      if (fixed_size.value.y) return 0.0
      else                    return 1.0
endClass
