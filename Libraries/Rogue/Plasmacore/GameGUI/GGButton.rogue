uses  Plasmacore

enum GGButtonState
  IDLE
  TARGETED
  PRESSED
  SELECTED
  DISABLED
endEnum

class GGButton : GGComponent
  PROPERTIES
    text                 : RichText
    image                : Image

    press_timer          = Timer(0.2,&expired)

    is_pressed           : Logical
    is_selected          : Logical
    is_disabled          : Logical

    on_press_callback    : Function()
    on_release_callback  : Function()
    on_select_callback   : Function()
    on_deselect_callback : Function()

  METHODS
    method init( fixed_size:XY )
      this.fixed_size = fixed_size
      size = fixed_size

    method init( fixed_size )

    method init( text:String, font=GGComponentManager.default_font:Font, fixed_size=GGSize(0,0) )
      this.text = RichText( font.cloned, Anchor.CENTER )
      this.text.print( text )

    method init( text, fixed_size )
      text.anchor = Anchor.CENTER

    method init( text, fixed_size:XY )
      init( text, GGSize(fixed_size) )

    method init( image )
      if (image)
        fixed_size = image.size
        size = fixed_size
      endIf

    method draw_background
      local img = image
      if (img)
        img.anchor = Anchor.TOP_LEFT
        img.draw( position )
      else
        local outline_color = select{ is_disabled:Color.GRAY || Color.WHITE }
        bounds.fill( outline_color )

        local c : Color
        if (is_disabled)     c = Color.BLACK
        elseIf (is_pressed)  c = 0xff8080ff
        elseIf (is_targeted) c = Color.BLUE
        else                 c = Color.BLACK

        bounds.cropped(2).fill( c )
        if (is_toggle and is_selected)
          bounds.cropped(6).fill( outline_color )
        endIf
      endIf

    method draw_text
      if (text)
        text.font.color = select{ is_disabled:Color.GRAY || Color.WHITE }
        text.draw( bounds )
      endIf

    method handle( e:PointerEvent )
      GGComponentManager.pointer_position = e.position
      if (GGComponentManager.pointer_focus and GGComponentManager.pointer_focus is not this)
        GGComponentManager.pointer_focus.handle( e )
        return
      endIf

      if (is_disabled)
        GGComponentManager.pointer_focus = null
        is_pressed  = false
        return
      endIf

      if (e.is_press)
        if (this.contains(e) and GGComponentManager.pointer_focus is not this)
          GGComponentManager.pointer_focus = this
          is_pressed = true
          press_timer.restart
          on_press
          if (on_press_callback) on_press_callback()
        endIf

      elseIf (e.is_release)
        if (@is_pressed)
          is_pressed = false
          GGComponentManager.pointer_focus = null
          if (System.is_mobile) GGComponentManager.pointer_position = null  # don't leave buttons targeted after pointer-up
          on_release
          if (on_release_callback) on_release_callback()

          if (this.contains(e))
            if (this.is_toggle)
              this.is_selected = not this.is_selected
              if (this.is_selected)
                on_select
                if (on_select_callback) on_select_callback()
              else
                on_deselect
                if (on_deselect_callback) on_deselect_callback()
              endIf
            else
              on_select
              if (on_select_callback) on_select_callback()
            endIf
          endIf
        endIf

      elseIf (e.is_move)
        if (not contains(e))
          if (@is_pressed)
            is_pressed = false
            GGComponentManager.pointer_focus = null
            on_release
            if (on_release_callback) on_release_callback()
          endIf
        endIf
      endIf

    method image->Image
      return @image

    method is_pressed->Logical
      return (@is_pressed or not press_timer.is_expired)

    method is_targeted->Logical
      if (not GGComponentManager.pointer_position.exists) return false
      if (not this.contains(GGComponentManager.pointer_position.value)) return false
      if (GGComponentManager.pointer_focus is null) return true
      return (GGComponentManager.pointer_focus is this)

    method is_toggle->Logical
      return false

    method state->GGButtonState
      if (is_pressed)  return GGButtonState.PRESSED
      if (is_selected) return GGButtonState.SELECTED
      if (is_targeted) return GGButtonState.TARGETED
      if (is_disabled) return GGButtonState.DISABLED
      return GGButtonState.IDLE

    method on_draw
      draw_background
      draw_text

    method on_press
      noAction

    method on_release
      noAction

    method on_select
      noAction

    method on_deselect
      noAction

    method on_press( @on_press_callback )->this
      return this

    method on_release( @on_release_callback )->this
      return this

    method on_select( @on_select_callback )->this
      return this

    method on_deselect( @on_deselect_callback )->this
      return this

    method set_press_time( duration:Real64 )->this
      press_timer.duration = duration
      return this

    method set_text( @text )->this
      return this

    method set_text( text:String )->this
      this.text.clear.println( text )
      return this

    method update_layout( new_bounds:Box )
      @trace bounds, fixed_size, size
      prior.update_layout( new_bounds )

endClass

