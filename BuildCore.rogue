# To run this build file, install Rogue from github.com/AbePralle/Rogue then cd
# to this folder and type "rogo" at the command line.

#$ LIBRARIES(macOS) = brew

$define DEFAULT_PLASMACORE "https://github.com/AbePralle/Plasmacore.git@master"

LocalSettings
ProjectSettings

augment Build
  PROPERTIES
    PLASMACORE_FOLDER = "Libraries/Plasmacore"
endAugment

# description()s are optional - Rogo uses introspection to determine which
# commands are available. 'rogo help default' displays the description for
# "default", etc.
description( "default", "The default action is performed when no other actions are specified. Use 'rogo default' to explicitly perform the default option." )
description( "help",    "Displays a list of all actions that can be performed by Rogo." )

routine rogo_default
  if (not File.exists(Build.PLASMACORE_FOLDER))
    rogo_update
  else
    rogo_help
  endIf
endRoutine

routine rogo_install_plasmacore( loc="":String )
  if (not String.exists(loc))
    println "Enter Git URL or system filepath [default $]:" (DEFAULT_PLASMACORE)
    loc = Console.input( "> " )
    if (loc == "")
      loc = DEFAULT_PLASMACORE
      println loc
    endIf
  endIf

  if (File.exists(loc))
    # Use existing copy of repo
    loc = File.absolute_filepath( loc )
    println ''Local.settings: PLASMACORE_FOLDER = $'' (loc)
    Build.PLASMACORE_FOLDER = loc
    LocalSettings//PLASMACORE_FOLDER = loc

  else
    # Clone repo
    local url = loc.before_first( '@' )
    local branch = loc.after_first( '@' )
    if (not String.exists(branch)) branch = DEFAULT_PLASMACORE.after_first( '@' )
    execute "git clone $ --branch $ --single-branch $" (url,branch,Build.PLASMACORE_FOLDER)
  endIf
endRoutine

routine error_exit( message:String )
  local w = Console.width.clamped_high(80)
  Console.error.println "=" * w
  Console.error.println "ERROR"
  Console.error.println( message.word_wrapped(w-2).indented(2) )
  Console.error.println "=" * w
  System.exit 1
endRoutine

routine rogo_update
  if (not File.exists(Build.PLASMACORE_FOLDER))
    println "=" * Console.width.clamped_high(80)
    println "Plasmacore library does not exist at $" (Build.PLASMACORE_FOLDER)
    println "=" * Console.width.clamped_high(80)
    rogo_install_plasmacore
  endIf

  require File.exists( Build.PLASMACORE_FOLDER )

  local version_filepath = "Libraries/Rogue/Plasmacore/PlasmacoreVersion.rogue"

  if (File.exists(version_filepath))
    error_exit "No change - the Plasmacore repo cannot update itself."
  endIf

  version_filepath = File.join( Build.PLASMACORE_FOLDER, version_filepath )

  local folder = File.shell_escaped( Build.PLASMACORE_FOLDER )
  if (Process.run("cd $ && git diff-index --quiet HEAD" (folder)).exit_code or
      Process.run("cd $ && git rev-list @{u}.." (folder)).exit_code)
    error_exit "Cannot update: $ has local modifications and/or unpushed changes." (Build.PLASMACORE_FOLDER)
  endIf

  println "Pulling changes to $" (Build.PLASMACORE_FOLDER)
  local result = Process.run( "cd $ && git pull"(folder) ).exit_code
  if (result)
    error_exit "Unable to pull changes to $" (Build.PLASMACORE_FOLDER)
  endIf

  local repo_v = File.load_as_string( version_filepath ).extract_string( ''*define PLASMACORE_VERSION "$"*'' )
  trace repo_v

  #String.exists(ProjectSettings//PLASMACORE_VERSION)
endRoutine

routine execute( commands:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    print( "> " ).println( cmd )
    if (System.run(cmd) != 0)
      if (suppress_error) return false
      else                throw Error( "Build failed." )
    endIf
  endForEach
  return true
endRoutine

class Settings
  PROPERTIES
    file   : File
    values = @{}

  METHODS
    method init( filepath:String )
      file = File( filepath )
      if (file.exists)
        forEach (line in LineReader(file))
          line .= trimmed
          if (line.begins_with('#')) nextIteration
          local name = line.before_first( '=' )
          local value = line.after_first( '=' )
          if (name and value)
            name  .= trimmed
            value .= trimmed
            if (value.begins_with('"') and value.ends_with('"')) value = value.leftmost(-1).rightmost(-1)
            value .= replacing( "\\\"", "\"" )
            values[ name ] = value
          endIf
        endForEach
      endIf

    method description->String
      use builder = StringBuilder.pool
        forEach (key in values.keys)
          builder.print "$ = " (key)
          local value = values[key]->String
          value .= replacing( "\"", "\\\"" )
          if (value.contains(' ')) builder.println ''\"$\"'' (value)
          else                     builder.println value
        endForEach
        return builder->String
      endUse

    method get( name:String )->String
      return values[ name ]

    method set( name:String, value:String )
      values[ name ] = value

      # Save new settings with each change
      file.save( description )
endClass

class LocalSettings : Settings [singleton]
  METHODS
    method init
      prior.init( "Local.settings" )
endClass

class ProjectSettings : Settings [singleton]
  METHODS
    method init
      prior.init( "Project.settings" )
endClass

#-------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#-------------------------------------------------------------------------------
# Rogo is a "build your own build system" facilitator. At its core Rogo just
# recompiles build files if needed and then runs the build executable while
# forwarding any command line arguments. This file contains a default framework
# which uses introspection to turn command line arguments into parameterized
# routine calls.

# Example: to handle the command "rogo abc xyz 5", define
# "routine rogo_abc_xyz( n:Int32 )".

# "rogo_default" will run in the absence of any other command line argument.

# The following "comment directives" can be used in this file to control how
# RogueC compiles it and to manage automatic dependency installation and
# linking.

# Each of the following should be on a line beginning with the characters #$
# (preceding whitespace is fine). Sample args are given.

#   ROGUEC       = roguec       # Path to roguec to compile this file with
#   ROGUEC_ARGS  = --whatever   # Additional options to pass to RogueC
#   CPP          = g++ -Wall -std=gnu++11 -fno-strict-aliasing
#                  -Wno-invalid-offsetof   # C++ compiler path and/or invocation
#   CPP_ARGS     = -a -b -c          # Additional C++ args
#   LINK         = true              # Links following LIBRARIES with this Build
#                                    # file (otherwise just installs them)
#   LINK         = -lalpha -lbeta    # Links following LIBRARIES and includes
#                                    # these additional flags
#   LINK         = false             # Linking turned off for following
#                                    # LIBRARIES - info can still be obtained
#                                    # from $LIBRARY_FLAGS()
#   LINK(macOS)  = ...               # Options applying only to
#                                    # System.os=="macOS" (use with any OS and
#                                    # any comment directive)
#   LIBRARIES    = libalpha
#   LIBRARIES    = libbeta(library-name)
#   LIBRARIES    = libfreetype6-dev(freetype2)
#   DEPENDENCIES = Library/Rogue/**/*.rogue
#
#   LIBRARIES    = name(package)
#   LIBRARIES    = name(package:<package> install:<install-cmd>
#                  link:<link-flags> which:<which-name>)
#
# The following macro is replaced within this file (Build.rogue) - the libraries
# should normally also be declared in #$ LIBRARIES:
#
#   $LIBRARY_FLAGS(lib1,lib2)                              # sample macro
#     ->
#   -Ipath/to/lib1/include -Lpath/to/lib1/library -I ...   # sample replacement

routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description=null:String, syntax=null:String )
  if (description) Global.description( command, description )
  if (syntax)      Global.syntax( command, syntax )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = StringTable<<String>>()
    rogo_descriptions   = StringTable<<String>>()
    rogo_prefix         = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_SETTINGS_FILE = "Local.settings"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      require m || "no such routine rogo_$()" (rogo_command)

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( NullValue )
          others:       args.add( arg )
        endWhich
      endForEach
      if (m.parameter_count == 1 and args.count > 1) args = @[ args ] # Wrap args in a ValueList.
      m( args )

    method find_command( name:String )->MethodInfo
      return <<Global>>.find_global_method( rogo_prefix + name )

    method on_error
      local w = Console.width.or_smaller( 80 )
      Console.error.println "=" * w
      Console.error.println rogo_error
      Console.error.println "=" * w
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * w
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = _join( parts )
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_defs
      read_defs( LOCAL_SETTINGS_FILE )

    method read_defs( defs_filepath:String )
      # Attempt to read defs from Local.settings
      local overrides = String[]
      if (File.exists(defs_filepath))
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local value = line.after_first('=').trimmed
            if (value.begins_with('"') or value.begins_with('\''))
              value = value.leftmost(-1).rightmost(-1)
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              <<Build>>.set_property( this, p, Value(value) )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Value )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(76)))
        print( "  " ).println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (command)
      println "=" * w
      println
    endIf
  endIf

  println "USAGE"
  local lines = String[]
  forEach (m in <<Global>>.global_methods)
    if (m.name.begins_with(Build.rogo_prefix))
      lines.add( "  " + get_syntax(m.name.after_first(Build.rogo_prefix)) )
    endIf
  endForEach
  lines.sort( (a,b)=>(a<b) )
  println (forEach in lines)
  println
endRoutine


routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Global>>.find_global_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine
